<?php

namespace app\models\site;

use yii\data\Pagination;
use yii\db\ActiveRecord;
use yii\web\IdentityInterface;
use app\models\profile\PhotoUpload;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string|null $name
 * @property string|null $email
 * @property string|null $password
 * @property int|null $admin
 * @property int|null $ban
 * @property string|null $photo
 *
 * @property Comment[] $comments
 */
class User extends ActiveRecord implements IdentityInterface
{
    const ADMIN_UNSET = 0;
    const ADMIN_SET = 1;

    const BAN_UNSET = 0;
    const BAN_SET = 1;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['admin', 'ban'], 'integer'],
            [['name', 'email', 'password', 'photo'], 'string', 'max' => 255],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'email' => 'Email',
            'password' => 'Password',
            'admin' => 'Admin',
            'ban' => 'Ban',
            'photo' => 'Photo',
        ];
    }

    public static function findIdentity($id)
    {
        return User::findOne($id);
    }

    public function getId()
    {
        return $this->id;
    }

    public function getAuthKey()
    {
        // TODO: Implement getAuthKey() method.
    }

    public function validateAuthKey($authKey)
    {
        // TODO: Implement validateAuthKey() method.
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        // TODO: Implement findIdentityByAccessToken() method.
    }

    /**
     * Finds user by email
     *
     * @param string $email
     */
    public static function findByEmail($email)
    {
        return User::find()->where(['email' => $email])->one();
    }

    /**
     * Validates the password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return $this->password == $password;
    }

    public function beforeDelete()
    {
        $this->deletePhoto();

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function deletePhoto()
    {
        $imageUploadModel = new PhotoUpload();
        $imageUploadModel->deleteCurrentPhoto($this->photo);
    }

    public function getPhoto()
    {
        return ($this->photo) ? '/photos/' . $this->photo: '/photos/user.jpg';
    }

    public function savePhoto($filename)
    {
        $this->photo = $filename;

        return $this->save(false);
    }

    public static function getAll($pageSize = 5)
    {
        $query = User::find();

        return User::getPagination($query, $pageSize);
    }

    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['user_id' => 'id']);
    }

    public function getUserComments($status = 1, $pageSize = 5)
    {
        $query = User::getQuery($status);

        return Comment::getPagination($query, $pageSize);
    }

    public function getQuery($status)
    {
        if ($status === 0 || $status === 1) {
            // build a DB query to get all comments with a valid status
            $query = $this->getComments()
            ->orderBy('id desc')
            ->where(['status' => $status]);

        } elseif ($status == null) {
            // build a DB query to get all comments
            $query = $this->getComments()
            ->orderBy('id desc');

        } else {
            return false;
        }

        return $query;
    }

    public static function getPagination($query, $pageSize)
    {
        // get the total number of users (but do not fetch the user data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize' => $pageSize]);

        // limit the query using the pagination and retrieve the users
        $users = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        $data['users'] = $users;
        $data['pagination'] = $pagination;

        return $data;
    }

    public function isAdmin()
    {
        return $this->admin;
    }

    public function setAdmin()
    {
        $this->admin = self::ADMIN_SET;

        return $this->save(false);
    }

    public function unsetAdmin()
    {
        $this->admin = self::ADMIN_UNSET;

        return $this->save(false);
    }

    public function isBanned()
    {
        return $this->ban;
    }

    public function setBan()
    {
        $this->ban = self::BAN_SET;

        return $this->save(false);
    }

    public function unsetBan()
    {
        $this->ban = self::BAN_UNSET;

        return $this->save(false);
    }
}
